using ABB.Robotics.Controllers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;

namespace RFRCC_RobotController.ABB_Data
{
    /// <summary>
    /// Collection of controller info vital for connecting to a controller. Generated by Robot Controller Stream Scanner
    /// </summary>
    public class ControllerCollection : IEnumerable<NetworkControllerInfo>, IList<NetworkControllerInfo>
    {
        internal List<NetworkControllerInfo> _controllerInfos = new List<NetworkControllerInfo>();
        internal bool _IsReadOnly = true;
        /// <summary>
        /// Return ControllerInfo List Item
        /// </summary>
        /// <param name="index">List item position of return ControllerInfo</param>
        /// <returns></returns>
        public NetworkControllerInfo this[int index] 
        { 
            get => _controllerInfos[index]; 
            set => throw new NotImplementedException(); 
        }
        /// <summary>
        /// Collection of controller info vital for connecting to a controller. Generated by Robot Controller Stream Scanner
        /// </summary>
        /// <param name="controllerInfos">ABB Collection of Controller Infos</param>
        public ControllerCollection(ControllerInfoCollection controllerInfos)
        {
            for (int i = 0; i < controllerInfos.Count; i++)
            {
                _controllerInfos.Add(new NetworkControllerInfo(controllerInfos[i]));
            }
            
        }
        /// <summary>
        /// Number of controllers identified on network
        /// </summary>
        public int Count => _controllerInfos.Count;
        /// <summary>
        /// accessibility to changing any controller information
        /// </summary>
        public bool IsReadOnly => _IsReadOnly;

        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="item"></param>
        public void Add(NetworkControllerInfo item)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a controller from an ABB controller info class
        /// </summary>
        /// <param name="item">ABB ControllerInfo to be added</param>
        public void Add(ControllerInfo item)
        {
            _controllerInfos.Add(new NetworkControllerInfo(item));
        }

        /// <summary>
        /// Adds all controllers from an ABB controller info collection class
        /// </summary>
        /// <param name="items">Collection of ABB ControllerInfo's to be added</param>
        public void Add(ControllerInfoCollection items)
        {
            for (int i = 0; i < items.Count; i++)
            {
                _controllerInfos.Add(new NetworkControllerInfo(items[i]));
            }
        }

        /// <summary>
        /// Not Allowed
        /// </summary>
        public void Clear()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Returns comparision if item is contained
        /// </summary>
        /// <param name="item">Controller for comparison</param>
        /// <returns></returns>
        public bool Contains(NetworkControllerInfo item)
        {
            return _controllerInfos.Contains(item);
        }
        /// <summary>
        /// Copy array of NetworkControllerInfo to into this object starting at index
        /// </summary>
        /// <param name="array">1D array to be copied into object</param>
        /// <param name="arrayIndex">starting index</param>
        public void CopyTo(NetworkControllerInfo[] array, int arrayIndex)
        {
            _controllerInfos.CopyTo(array, arrayIndex);
        }
        /// <summary>
        /// Returns enumerator of ControllerInfo list
        /// </summary>
        /// <returns>enumerator of ControllerInfo list</returns>
        public IEnumerator<NetworkControllerInfo> GetEnumerator()
        {
            return _controllerInfos.GetEnumerator();
        }
        /// <summary>
        /// Returns the index of the supplied item within the list
        /// </summary>
        /// <param name="item">Network Controller info to be compared</param>
        /// <returns></returns>
        public int IndexOf(NetworkControllerInfo item)
        {
            return _controllerInfos.IndexOf(item);
        }
        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="index"></param>
        /// <param name="item"></param>
        public void Insert(int index, NetworkControllerInfo item)
        {
            _controllerInfos.Insert(index, item);
            throw new NotSupportedException();
        }
        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public bool Remove(NetworkControllerInfo item)
        {
            throw new NotSupportedException();
        }
        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="index"></param>
        public void RemoveAt(int index)
        {
            throw new NotSupportedException();
        }
        /// <summary>
        /// Returns enumerator of ControllerInfo list
        /// </summary>
        /// <returns></returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return _controllerInfos.GetEnumerator();
        }
    }

}
